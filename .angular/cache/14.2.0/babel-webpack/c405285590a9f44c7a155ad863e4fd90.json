{"ast":null,"code":"import { addSemErrorsToTable, addTokenToTable, addTokenToTableFuntion, checkToken, getValueType, updateExpression } from \"./analisis_semantico\";\nlet bandera;\nlet mostrarEntradas;\nlet indice;\nlet errors = \"\";\nlet message = \"\";\nlet tokensOmitir;\nexport let codeSimp = \"\";\nexport function initSintactico(tokens) {\n  bandera = true;\n  mostrarEntradas = false;\n  indice = -1;\n  errors = '';\n  message = '';\n  tokensOmitir = [];\n  codeSimp = '';\n  ProgramaFuente(tokens);\n  let tmp = tokens.filter((value, indexDelete) => {\n    for (let index = tokensOmitir.length - 1; index >= 0; index--) {\n      if (tokensOmitir[index] == indexDelete) return false;\n    }\n\n    return true;\n  });\n  let tmp2 = tmp.map(data => {\n    return data.value;\n  });\n  let data = '';\n  tmp2.forEach(value => {\n    data += value;\n\n    if (value != '\\n') {\n      data += ' ';\n    }\n  });\n  codeSimp = data;\n}\nexport function getSinErrors() {\n  return errors;\n}\nexport function getSinMessage() {\n  return message;\n}\n\nfunction addErrors(tokens, message, line, finalString, nextLine) {\n  errors += `Línea - > ${line}, ${message}${finalString}`;\n  bandera = false;\n\n  if (nextLine) {\n    while (indice < tokens.length && tokens[indice].line <= line) {\n      indice++;\n    }\n\n    indice--;\n  }\n}\n\nfunction ProgramaFuente(tokens) {\n  if (tokens.length > 0) {\n    Statements(tokens);\n\n    if (bandera && indice == tokens.length - 1 && errors.length <= 0) {\n      message = 'Todo OK';\n    }\n  }\n}\n\nfunction Statements(tokens) {\n  if (mostrarEntradas) console.log('Sentencias', indice);\n  bandera = true;\n\n  if (indice < tokens.length) {\n    if (evaluarTokens(tokens, indice, ['New_Line'])) {\n      // let tokenAnterior = tokens[indice-1];\n      // console.log(tokenAnterior)\n      // tokensOmitir.push(indice);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Comment'])) {\n      //\n      tokensOmitir.push(indice);\n      tokensOmitir.push(indice + 1);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Execute'])) {\n      //\n      ExpressionForzada(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Input'])) {\n      Print(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Var'])) {\n      //\n      let itmp = indice;\n      Declaration(tokens);\n\n      if (bandera) {\n        const check = checkToken(tokens[itmp + 1]);\n\n        if (check) {\n          // addSemErrors(('Ya existe definición de: \"' + check.token.value + '\" - - > Linea Origen : ' + check.token.line + ' - - Linea Actual: ' + tokens[itmp].line + \"\\n\"));\n          // console.log('Check', check)\n          addSemErrorsToTable(tokens[itmp].line, check.token.line, 'Ya existe definición de: \"' + check.token.value + '\"', check.valueType);\n        } else {\n          addTokenToTable(tokens[itmp + 1], tokens.slice(itmp + 3, indice + 1), 'var');\n        }\n      }\n\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Id'])) {\n      //\n      let itmp = indice;\n      Assignament(tokens);\n\n      if (bandera) {\n        const check = checkToken(tokens[itmp]);\n\n        if (!check) {\n          //addSemErrors(('No existe \"' + tokens[itmp].value + '\":  - - > Linea Actual: ' + tokens[itmp].line + \"\\n\"));\n          addSemErrorsToTable(tokens[itmp].line, 'N/A', 'No hay registro de \"' + tokens[itmp].value + '\"', 'N/A');\n        } else {\n          if (check.type == 'var') {\n            const value = tokens.slice(itmp + 2, indice + 1);\n\n            if (check.valueType == getValueType(value)) {\n              check.valor = tokens.slice(itmp + 2, indice + 1);\n              updateExpression(check);\n            } else {\n              // addSemErrors(('No se puede cambiar de tipo de dato, Tipo dato Actual: ' + check.valueType + \" - - > Linea Origen : \" + check.token.line + ' - - Linea Actual: ' + tokens[itmp].line + \"\\n\"));\n              // console.log(check)\n              addSemErrorsToTable(tokens[itmp].line, check.token.line, 'No se puede cambiar de tipo de dato de \"' + check.token.value + '\"', check.valueType);\n            }\n          } else {\n            //addSemErrors(('No se puede redefinir el tipo: ' + check.type + \" - - > Linea Origen : \" + check.token.line + ' - - Linea Actual: ' + tokens[itmp].line + \"\\n\"));\n            addSemErrorsToTable(tokens[itmp].line, check.token.line, 'No se puede redefinir el tipo de dato de \"' + check.token.value + '\"', check.type);\n          }\n        }\n      }\n\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Get'])) {\n      //\n      Destruct(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Print'])) {\n      //\n      Print(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Class'])) {\n      //\n      console.log('Hola');\n      let itmp = indice;\n      Class(tokens);\n\n      if (bandera) {\n        const check = checkToken(tokens[itmp + 1]);\n\n        if (check) {\n          addSemErrorsToTable(tokens[itmp].line, check.token.line, 'Ya existe definición de: \"' + check.token.value + '\"', check.type);\n        } else {\n          addTokenToTable(tokens[itmp + 1], tokens.slice(itmp + 3, indice + 1), 'clase');\n        }\n      }\n\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Def'])) {\n      //\n      let itmp = indice;\n      Functions(tokens);\n\n      if (bandera) {\n        const check = checkToken(tokens[itmp + 1]);\n\n        if (check) {\n          addSemErrorsToTable(tokens[itmp].line, check.token.line, 'Ya existe definición de: \"' + check.token.value + '\"', check.type);\n        } else {\n          let valueType = \"\";\n\n          for (let i = itmp; i < indice; i++) {\n            if (tokens[i].value == ':') {\n              valueType = tokens[i + 1].value;\n              break;\n            }\n          }\n\n          console.log('Valor ->', valueType);\n          addTokenToTableFuntion(tokens[itmp + 1], tokens.slice(itmp + 2, indice + 1), 'funcion', valueType);\n        }\n      }\n\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['Return'])) {\n      //\n      ExpressionForzada(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['If'])) {\n      //\n      If(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['For'])) {\n      //\n      For(tokens);\n      Statements(tokens);\n    } else if (evaluarTokens(tokens, indice, ['While'])) {\n      //\n      While(tokens);\n      Statements(tokens);\n    }\n  }\n}\n\nfunction While(tokens) {\n  if (mostrarEntradas) console.log('While', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    //\n    Condition(tokens);\n\n    if (evaluarTokens(tokens, indice, [')'])) {\n      if (evaluarTokens(tokens, indice, ['{'])) {\n        Statements(tokens);\n\n        if (evaluarTokens(tokens, indice, ['}'])) {} else {\n          addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction For(tokens) {\n  if (mostrarEntradas) console.log('For', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    if (evaluarTokens(tokens, indice, ['Var'])) {\n      if (evaluarTokens(tokens, indice, ['Id'])) {\n        if (evaluarTokens(tokens, indice, [':'])) {\n          ExpressionForzada(tokens);\n\n          if (evaluarTokens(tokens, indice, [')'])) {\n            if (evaluarTokens(tokens, indice, ['{'])) {\n              Statements(tokens);\n\n              if (evaluarTokens(tokens, indice, ['}'])) {} else {\n                addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n              }\n            } else {\n              addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n            }\n          } else {\n            addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n          }\n        } else {\n          addErrors(tokens, 'Se esperaba un \":\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \"Identificador\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \"var\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction If(tokens) {\n  if (mostrarEntradas) console.log('If', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    Condition(tokens);\n\n    if (evaluarTokens(tokens, indice, [')'])) {\n      if (evaluarTokens(tokens, indice, ['{'])) {\n        Statements(tokens);\n\n        if (evaluarTokens(tokens, indice, ['}'])) {\n          if (evaluarTokens(tokens, indice, ['Else'])) {\n            Else(tokens);\n          }\n        } else {\n          addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Else(tokens) {\n  if (mostrarEntradas) console.log('Else', indice);\n\n  if (evaluarTokens(tokens, indice, ['If'])) {\n    If(tokens);\n  } else if (evaluarTokens(tokens, indice, ['{'])) {\n    Statements(tokens);\n\n    if (evaluarTokens(tokens, indice, [\"}\"])) {} else {\n      addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un si o una \"{\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Functions(tokens) {\n  if (mostrarEntradas) console.log('Functions', indice);\n\n  if (evaluarTokens(tokens, indice, ['Id'])) {\n    if (evaluarTokens(tokens, indice, ['('])) {\n      ParametersF(tokens);\n\n      if (evaluarTokens(tokens, indice, [')'])) {\n        if (evaluarTokens(tokens, indice, [':'])) {\n          // if ((evaluarTokens(tokens, indice, ['Int'])) ||\n          //   evaluarTokens(tokens, indice, ['Double']) ||\n          //   evaluarTokens(tokens, indice, ['Boolean']) ||\n          //   evaluarTokens(tokens, indice, ['String'])||\n          //   evaluarTokens(tokens, indice, ['Void'])) {\n          console.log(tokens[indice + 1]);\n\n          if (evaluarTokens(tokens, indice, ['IdClase'])) {\n            if (evaluarTokens(tokens, indice, ['{'])) {\n              Statements(tokens);\n\n              if (evaluarTokens(tokens, indice, ['}'])) {} else {\n                addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n              }\n            } else {\n              addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n            }\n          } else {\n            addErrors(tokens, 'Se esperaba devolver un tipo de Dato ppara la función', tokens[indice].line, '\\n', true);\n          }\n        } else {\n          addErrors(tokens, 'Se esperaba un \":\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"Identificador\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Class(tokens) {\n  if (mostrarEntradas) console.log('Class', indice);\n\n  if (evaluarTokens(tokens, indice, ['IdClase'])) {\n    if (evaluarTokens(tokens, indice, ['('])) {\n      ParametersF(tokens);\n\n      if (evaluarTokens(tokens, indice, [')'])) {\n        if (evaluarTokens(tokens, indice, ['{'])) {\n          Statements(tokens);\n\n          if (evaluarTokens(tokens, indice, ['}'])) {} else {\n            addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n          }\n        } else {\n          addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"Identificador de Clase\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Print(tokens) {\n  if (mostrarEntradas) console.log('Print', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    Parameters(tokens);\n\n    if (evaluarTokens(tokens, indice, [')'])) {} else {\n      addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Destruct(tokens) {\n  if (mostrarEntradas) console.log('Destruct', indice);\n\n  if (evaluarTokens(tokens, indice, ['{'])) {\n    ParametersF(tokens);\n\n    if (evaluarTokens(tokens, indice, ['}'])) {\n      if (evaluarTokens(tokens, indice, ['OAs'])) {\n        ExpressionForzada(tokens);\n      } else {\n        addErrors(tokens, 'Se esperaba un \"Operador de Asignación\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      addErrors(tokens, 'Se esperaba un \"}\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"{\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Assignament(tokens) {\n  if (mostrarEntradas) console.log('Assignament', indice);\n\n  if (evaluarTokens(tokens, indice, ['OAs'])) {\n    if (evaluarTokens(tokens, indice, ['Input'])) {\n      if (evaluarTokens(tokens, indice, ['('])) {\n        if (evaluarTokens(tokens, indice, ['String'])) {\n          if (evaluarTokens(tokens, indice, [')'])) {} else {\n            addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n          }\n        } else {\n          addErrors(tokens, 'Se esperaba un \"Cadena\"', tokens[indice].line, '\\n', true);\n        }\n      } else {\n        addErrors(tokens, 'Se esperaba un \"(\"', tokens[indice].line, '\\n', true);\n      }\n    } else {\n      ExpressionForzada(tokens);\n    }\n  } else {\n    addErrors(tokens, 'Se esperaba un \"Operador de Asignación\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Declaration(tokens) {\n  if (mostrarEntradas) console.log('Declaration', indice);\n\n  if (evaluarTokens(tokens, indice, ['Id'])) {\n    Assignament(tokens);\n  } else {\n    addErrors(tokens, 'Se esperaba un \"Identificador\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction ExpressionForzada(tokens) {\n  if (mostrarEntradas) console.log('Expression Forzada', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    ExpressionForzada(tokens);\n    ExpressionForzadaP(tokens);\n\n    if (evaluarTokens(tokens, indice, [')'])) {\n      ExpressionForzadaP(tokens);\n    } else {\n      addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    VBasic(tokens, false);\n    ExpressionForzadaP(tokens);\n  }\n}\n\nfunction ExpressionForzadaP(tokens) {\n  if (mostrarEntradas) console.log('Expression Forzada P', indice);\n\n  if (evaluarTokens(tokens, indice, ['OA'])) {\n    ExpressionForzada(tokens);\n  } else {}\n}\n\nfunction Expression(tokens) {\n  if (mostrarEntradas) console.log('Expression', indice);\n\n  if (evaluarTokens(tokens, indice, ['('])) {\n    Expression(tokens);\n    ExpressionP(tokens);\n\n    if (evaluarTokens(tokens, indice, [')'])) {\n      ExpressionP(tokens);\n    } else {\n      addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    VBasic(tokens, true);\n    ExpressionP(tokens);\n  }\n}\n\nfunction ExpressionP(tokens) {\n  if (mostrarEntradas) console.log('Expression P', indice);\n\n  if (evaluarTokens(tokens, indice, ['OA'])) {\n    ExpressionP(tokens);\n  }\n}\n\nfunction VBasic(tokens, vacio) {\n  if (mostrarEntradas) console.log('VBasic', indice);\n\n  if (evaluarTokens(tokens, indice, [\"Int\"])) {} else if (evaluarTokens(tokens, indice, [\"Double\"])) {} else if (evaluarTokens(tokens, indice, [\"Id\"])) {\n    if (evaluarTokens(tokens, indice, ['('])) {\n      Parameters(tokens);\n\n      if (evaluarTokens(tokens, indice, [')'])) {\n        console.log('Hola');\n      } else {\n        addErrors(tokens, 'Se esperaba un \")\"', tokens[indice].line, '\\n', true);\n      }\n    } else if (evaluarTokens(tokens, indice, ['['])) {\n      ParametersArrPP(tokens);\n\n      if (evaluarTokens(tokens, indice, [']'])) {} else {\n        addErrors(tokens, 'Se esperaba un \"]\"', tokens[indice].line, '\\n', true);\n      }\n    }\n  } else if (evaluarTokens(tokens, indice, [\"String\"])) {} else if (evaluarTokens(tokens, indice, ['Boolean'])) {} else if (evaluarTokens(tokens, indice, ['['])) {\n    Parameters(tokens);\n\n    if (evaluarTokens(tokens, indice, [']'])) {} else {\n      addErrors(tokens, 'Se esperaba un \"]\"', tokens[indice].line, '\\n', true);\n    }\n  } else {\n    if (!vacio) {\n      addErrors(tokens, 'Se esperaba una expresión válida', tokens[indice].line, '\\n', true);\n    }\n  }\n}\n\nfunction ParametersArrP(tokens) {\n  if (mostrarEntradas) console.log('ParametersArrP', indice);\n\n  if (evaluarTokens(tokens, indice, [\",\"])) {\n    ParametersArrPP(tokens);\n  }\n}\n\nfunction ParametersArrPP(tokens) {\n  if (mostrarEntradas) console.log('Int', indice);\n\n  if (evaluarTokens(tokens, indice, [\"Int\"])) {\n    ParametersArrP(tokens);\n  }\n}\n\nfunction Parameters(tokens) {\n  if (mostrarEntradas) console.log('Parameters', indice);\n  Expression(tokens);\n  ParametersP(tokens);\n}\n\nfunction ParametersP(tokens) {\n  if (mostrarEntradas) console.log('Parameters P', indice);\n\n  if (evaluarTokens(tokens, indice, [\",\"])) {\n    ParametersPP(tokens);\n  }\n}\n\nfunction ParametersPP(tokens) {\n  if (mostrarEntradas) console.log('Parameters PP', indice);\n  ExpressionForzada(tokens);\n  ParametersP(tokens);\n}\n\nfunction ParametersF(tokens) {\n  if (mostrarEntradas) console.log('Parameters F', indice);\n\n  if (evaluarTokens(tokens, indice, [\"Id\"])) {\n    ParametersFP(tokens);\n  }\n}\n\nfunction ParametersFP(tokens) {\n  if (mostrarEntradas) console.log('Parameters FP', indice);\n\n  if (evaluarTokens(tokens, indice, [\",\"])) {\n    ParametersFPP(tokens);\n  }\n}\n\nfunction ParametersFPP(tokens) {\n  if (mostrarEntradas) console.log('Parameters FPP', indice);\n\n  if (evaluarTokens(tokens, indice, [\"Id\"])) {\n    ParametersFP(tokens);\n  } else {\n    addErrors(tokens, 'Se esperaba un \"Identificador\"', tokens[indice].line, '\\n', true);\n  }\n}\n\nfunction Condition(tokens) {\n  if (mostrarEntradas) console.log('Condition', indice);\n  ExpressionForzada(tokens);\n\n  if (evaluarTokens(tokens, indice, ['OR'])) {\n    Condition(tokens);\n  }\n}\n\nfunction evaluarTokens(tokens, index, checkTokens) {\n  if (indice < tokens.length) {\n    if (index + checkTokens.length < tokens.length && bandera) {\n      for (const indexToken in checkTokens) {\n        const token = tokens[++index];\n\n        if (token.tokenLex.token == 'NaN') {\n          indice = index;\n          addErrors(tokens, 'Error Tipo NaN', token.line, '\\n', true);\n          return true;\n        } else {\n          const checktoken = checkTokens[indexToken];\n\n          if (!(token.tokenLex.token == checktoken)) {\n            return false;\n          }\n        }\n      }\n\n      indice = index;\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}