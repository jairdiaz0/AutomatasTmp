{"ast":null,"code":"import { inFijoAPosFijo, inFijoAPreFijo } from './convert';\nlet errors = '';\nlet message = '';\nlet tablaSimbolos = [];\nlet table = {\n  headers: ['Linea Actual', 'Linea Origen', 'Error', 'Tipo Dato Actual'],\n  tokens: new Array(),\n  errors: new Array()\n};\nexport function addSemErrorsToTable(lineaActual, lineaOrigen, error, tipoDatoActual) {\n  table.errors.push({\n    line: lineaActual,\n    lineOrigin: lineaOrigen,\n    error: error,\n    typeValue: tipoDatoActual\n  });\n}\nexport function getSemanticoTable() {\n  return table;\n}\nexport function initSemantico() {\n  tablaSimbolos = [];\n  table.tokens = [];\n  table.errors = [];\n  errors = '';\n  message = '';\n}\nexport function getSemErrors() {\n  return errors;\n}\nexport function getSemMessage() {\n  return message;\n}\nexport function getTablaSimbolos() {\n  return tablaSimbolos;\n}\nexport function checkToken(token) {\n  for (let i = 0; i < tablaSimbolos.length; i++) {\n    const tokenTmp = tablaSimbolos[i];\n\n    if (token.value == tokenTmp.token.value) {\n      return tokenTmp;\n    }\n  }\n\n  return undefined;\n}\nexport function addSemErrors(error) {\n  errors += error;\n}\nexport function addTokenToTable(token, value, type) {\n  let valueOrigin = value.map(data => {\n    const {\n      value\n    } = data;\n    return value;\n  });\n  let expresion = value.map(data => {\n    const {\n      value,\n      tokenLex\n    } = data;\n\n    if (tokenLex.token == 'Id') {\n      for (let i = 0; i < tablaSimbolos.length; i++) {\n        let element = tablaSimbolos[i];\n\n        if (element.token.value == value) {\n          return element.expresion.value;\n        }\n      }\n    }\n\n    return value;\n  });\n  let vO = valueOrigin.toString().replaceAll(',', '');\n  let eO = expresion.toString().replaceAll(',', '');\n\n  if (vO != eO) {\n    const data = {\n      token: {\n        value: '-> ' + token.value\n      },\n      value: vO,\n      type: '',\n      valueType: '',\n      expresion: {\n        posFijo: inFijoAPosFijo(valueOrigin),\n        preFijo: inFijoAPreFijo(valueOrigin),\n        inFijo: vO,\n        value: ''\n      }\n    };\n    table.tokens.push(data);\n  }\n\n  const data = {\n    token: token,\n    value: value,\n    type: type,\n    valueType: getValueType(value),\n    expresion: {\n      posFijo: inFijoAPosFijo(expresion),\n      preFijo: inFijoAPreFijo(expresion),\n      inFijo: expresion.toString().replaceAll(',', ' '),\n      value: eval(eO)\n    }\n  };\n  tablaSimbolos.push(data); // console.log('TablaSimbolos', tablaSimbolos)\n\n  table.tokens.push(data);\n}\nexport function updateExpression(check) {\n  let expresion = check.valor.map(data => {\n    const {\n      value,\n      tokenLex\n    } = data;\n\n    if (tokenLex.token == 'Id') {\n      for (let i = 0; i < tablaSimbolos.length; i++) {\n        let element = tablaSimbolos[i];\n\n        if (element.token.value == value) {\n          return element.expresion.value;\n        }\n      }\n    }\n\n    return value;\n  });\n  check.expresion.posFijo = inFijoAPosFijo(expresion);\n  check.expresion.preFijo = inFijoAPreFijo(expresion), check.expresion.inFijo = expresion.toString().replaceAll(',', ' ');\n  check.expresion.value = eval(expresion.toString().replaceAll(',', ''));\n}\nexport function addTokenToTableFuntion(token, value, type, valueType) {\n  const data = {\n    token: token,\n    value: value,\n    type: type,\n    valueType: valueType\n  };\n  tablaSimbolos.push(data);\n  table.tokens.push(data);\n}\nexport function getValueType(tokens) {\n  // if (tokens.length > 1) {\n  let tipo = analisisRenglon(tokens);\n  return tipo; // } else {\n  //     return tokens[0].tokenLex.type;\n  // }\n}\n\nfunction analisisRenglon(tokens) {\n  let tipo = '';\n  tokens.forEach(element => {\n    if (tipo != 'NaN') {\n      if (element.tokenLex.token != 'OA' && element.tokenLex.token != '(' && element.tokenLex.token != ')' && element.tokenLex.token != ',') {\n        if (element.tokenLex.type == 'Cadena') {\n          tipo = 'Cadena';\n        } else if (tipo != 'Cadena') {\n          if (element.tokenLex.token == 'Id') {\n            let idEncontrado = false;\n            table.tokens.forEach(identificador => {\n              if (element.value == identificador.token.value) {\n                tipo = identificador.valueType;\n                idEncontrado = true;\n              }\n            });\n\n            if (!idEncontrado) {\n              addSemErrorsToTable(element.line, element.line, 'Variable no Encontrada', 'NaN');\n            }\n          } else {\n            if (tipo == '') {\n              tipo = element.tokenLex.type;\n            } else if (tipo != element.tokenLex.type) {\n              addSemErrorsToTable(element.line, element.line, 'Tipo de dato de asignaci√≥n invalido', tipo);\n              tipo = 'NaN';\n            }\n          }\n        }\n      }\n    }\n  });\n  return tipo;\n}","map":null,"metadata":{},"sourceType":"module"}